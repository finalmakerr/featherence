/*xCOMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v2.7 - Pass 3
   by Sp00kyFox, 2014

   Backpropagation and checkerboard smoothing.

*/


#define TEX(dx,dy)   tex2D(IN.texture,   texCoord+float2((dx),(dy))*t1)
#define TEXt0(dx,dy) tex2D(ORIG.texture, texCoord+float2((dx),(dy))*t1)


bool eq(float3 A, float3 B){
	return all(A == B);
}

float and(float a, float b){
	return min(a,b);
}

float or(float a, float b, float c, float d, float e, float f, float g, float h, float i){
	return max(a, max(b, max(c, max(d, max(e, max(f, max(g, max(h,i))))))));
}

float2 and(float2 a, float2 b){
	return min(a,b);
}

float2 or(float2 a, float2 b){
	return max(a,b);
}

float2 or(float2 a, float2 b, float2 c, float2 d){
	return max(a, max(b, max(c,d)));
}


struct previous
{
	uniform sampler2D texture;
	float2 tex_coord;
};

struct input
{
	float2 video_size;
	float2 texture_size;  
	float2 output_size;
	sampler2D texture : TEXUNIT0;
};

struct tex_coords
{
	float2 tex;
	float2 org;
};


/*    VERTEX_SHADER    */
void main_vertex
(
	float2 tex : TEXCOORD,	
	float4 position : POSITION,
	uniform float4x4 modelViewProj,

	previous ORIG,

	out float4 oPosition : POSITION,
	out tex_coords coords
)
{
	oPosition = mul(modelViewProj, position);

	coords = tex_coords(tex, ORIG.tex_coord);
}


/*    FRAGMENT SHADER    */
float4 main_fragment(in float2 texCoord : TEXCOORD0, uniform input IN, previous ORIG) : COLOR
{

        float2 t1 = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y); // F H

	/*
		UL U UR
		L  C R
		DL D DR
	*/

	float4 C  = TEX( 0, 0);	float3 c  = TEXt0( 0, 0);
	float2 L  = TEX(-1, 0);	float3 l  = TEXt0(-1, 0);
	float2 R  = TEX( 1, 0);	float3 r  = TEXt0( 1, 0);
	float2 U  = TEX( 0,-1);	float3 u  = TEXt0( 0,-1);
	float2 D  = TEX( 0, 1);	float3 d  = TEXt0( 0, 1);
	float2 UL = TEX(-1,-1);	float3 ul = TEXt0(-1,-1);
	float2 UR = TEX( 1,-1);	float3 ur = TEXt0( 1,-1);
	float2 DL = TEX(-1, 1);	float3 dl = TEXt0(-1, 1);
	float2 DR = TEX( 1, 1);	float3 dr = TEXt0( 1, 1);

	// Backpropagation
	C.xy = or(C.xy, and(C.zw, or(L.xy, R.xy, U.xy, D.xy)));

	// Checkerboard Smoothing
	C.y = or(C.y, and(U.y, eq(c,u)), and(D.y, eq(c,d)), and(L.y, eq(c,l)), and(R.y, eq(c,r)), and(UL.y, eq(c,ul)), and(UR.y, eq(c,ur)), and(DL.y, eq(c,dl)), and(DR.y, eq(c,dr)));

	return C;
}
