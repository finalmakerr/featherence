/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Genesis Dithering and Pseudo Transparency Shader v1.2 - Pass 0
   by Sp00kyFox, 2014

   Neighbor anaylsis via dot product of the difference vectors.

*/

// Uncomment the following line to activate strict pattern behavior (only allows 2 different colors).
//#define strict


#define TEX(dx,dy) tex2D(decal, VAR.texCoord+float2((dx),(dy))*VAR.t1).xyz

float eq(float3 A, float3 B)
{
	float3 diff = A-B;
	float  ravg = (A.x + B.x) * 0.5;

	diff *= diff * float3(2.0 + ravg, 4.0, 3.0 - ravg);
	
	float x = smoothstep(3.0, 0.0, sqrt(diff.x + diff.y + diff.z));
	return x*x;
}

struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
};

struct out_vertex {
        float4 position : POSITION;
        float2 texCoord : TEXCOORD0;
        float2 t1;
};


/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
        out_vertex OUT;

        OUT.position = mul(modelViewProj, position);

        float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
        float dx  = ps.x;
        float dy  = ps.y;

        OUT.texCoord = texCoord;
        OUT.t1       = float2(dx, dy); // F H

        return OUT;
}

/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{

	float3 C  = TEX( 0, 0);
	float3 L1 = TEX(-1, 0);
	float3 R1 = TEX( 1, 0);
	float3 L2 = TEX(-2, 0);
	float3 R2 = TEX( 2, 0);

#ifdef strict

	bool tag = all(L1 == R1) && any(C != L1) && (all(C == L2) || all(C == R2));

#else

	float tag = min(dot(normalize(C-L1), normalize(C-R1)) * eq(L1,R1), max(min(eq(C,L2), any(L1 != L2)), min(eq(C,R2), any(R1 != R2))));

#endif

	return float4(C, tag);

}
