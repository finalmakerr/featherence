/*
   Hyllian's Data Dependent Triangulation Shader - Extended Method
   
   Copyright (C) 2013 Hyllian/Jararaca - sergiogdb@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

const static float3 dtt = float3(65536,255,1);

float reduce(half3 color)
{
	return dot(color, dtt);
}


float3 bilinear(float p, float q, half3 A, half3 B, half3 C, half3 D)
{
	return ((1-p)*(1-q)*A + p*(1-q)*B + (1-p)*q*C + p*q*D);
}


struct input
{
	half2 video_size;
	float2 texture_size;
	half2 output_size;
};


struct out_vertex {
	half4 position : POSITION;
	half4 color    : COLOR;
	float2 texCoord : TEXCOORD0;
	half4 t1;
	half2 loc;
};


/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	half4 position	: POSITION,
	half4 color	: COLOR,
	float2 texCoord : TEXCOORD0,

   	uniform half4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);
	OUT.color = color;

	half2 ps = half2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	half dx = ps.x;
	half dy = ps.y;

	OUT.texCoord = texCoord;
	OUT.t1.xy = half2( dx,  0); // F
	OUT.t1.zw = half2(  0, dy); // H
	OUT.loc = texCoord*IN.texture_size;

	return OUT;
}



/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	float2 pos = frac(VAR.loc)-float2(0.5); // pos = pixel position
	float2 dir = sign(pos); // dir = pixel direction

	float2 g1 = dir*VAR.t1.xy;
	float2 g2 = dir*VAR.t1.zw;

	half3 A = tex2D(decal, VAR.texCoord       ).xyz;
	half3 B = tex2D(decal, VAR.texCoord +g1   ).xyz;
	half3 C = tex2D(decal, VAR.texCoord    +g2).xyz;
	half3 D = tex2D(decal, VAR.texCoord +g1+g2).xyz;

	half3 C00 = tex2D(decal, VAR.texCoord -g1-g2).xyz;
	half3 C01 = tex2D(decal, VAR.texCoord    -g2).xyz;
	half3 C02 = tex2D(decal, VAR.texCoord +g1-g2).xyz;
	half3 C03 = tex2D(decal, VAR.texCoord +2.0*g1-g2).xyz;

	half3 C10 = tex2D(decal, VAR.texCoord -g1   ).xyz;
	half3 C20 = tex2D(decal, VAR.texCoord -g1+g2).xyz;
	half3 C13 = tex2D(decal, VAR.texCoord +2.0*g1   ).xyz;
	half3 C23 = tex2D(decal, VAR.texCoord +2.0*g1+g2).xyz;

	half3 C30 = tex2D(decal, VAR.texCoord -g1+2.0*g2).xyz;
	half3 C31 = tex2D(decal, VAR.texCoord    +2.0*g2).xyz;
	half3 C32 = tex2D(decal, VAR.texCoord +g1+2.0*g2).xyz;
	half3 C33 = tex2D(decal, VAR.texCoord +2.0*g1+2.0*g2).xyz;



	float a = reduce(A);
	float b = reduce(B);
	float c = reduce(C);
	float d = reduce(D);

	float c00 = reduce(C00);
	float c01 = reduce(C01);
	float c02 = reduce(C02);
	float c03 = reduce(C03);

	float c10 = reduce(C10);
	float c20 = reduce(C20);
	float c13 = reduce(C13);
	float c23 = reduce(C23);

	float c30 = reduce(C30);
	float c31 = reduce(C31);
	float c32 = reduce(C32);
	float c33 = reduce(C33);


	float p = abs(pos.x);
	float q = abs(pos.y);

	float k = distance(pos,g1);
	float l = distance(pos,g2);

	float count1 = 0.0;
	float count2 = 0.0;

	count1 += float(abs(c00-a) < abs(c01-c10));
	count2 += float(abs(c00-a) > abs(c01-c10));
	count1 += float(abs(c01-b) < abs(c02-a));
	count2 += float(abs(c01-b) > abs(c02-a));
	count1 += float(abs(c02-c13) < abs(c03-b));
	count2 += float(abs(c02-c13) > abs(c03-b));
	count1 += float(abs(c10-c) < abs(c20-a));
	count2 += float(abs(c10-c) > abs(c20-a));
	count1 += float(abs(b-c23) < abs(c13-d));
	count2 += float(abs(b-c23) > abs(c13-d));
	count1 += float(abs(c20-c31) < abs(c-c30));
	count2 += float(abs(c20-c31) > abs(c-c30));
	count1 += float(abs(c32-c) < abs(c31-d));
	count2 += float(abs(c32-c) > abs(c31-d));
	count1 += float(abs(c33-d) < abs(c32-c23));
	count2 += float(abs(c33-d) > abs(c32-c23));


	if ((count1 >= 5.0) || ((abs(a-d) < abs(b-c)) && count2 <= 4.0))
	{
		if (k < l)
		{
			C = A + D - B;
		}
		else if (k > l)
		{
			B = A + D - C;
		}
	}
	else if ((count2 >= 5.0) || (abs(a-d) > abs(b-c)))
	{
		D = B + C - A;
	}

	float3 color = bilinear(p, q, A, B, C, D);

	return float4(color, 1.0);
}

