/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Copyright (C) 2006 guest(r) - guest.r@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

half3  dt = half3(1,1,1);

/*
   The AdvancedAA shader is well used to:
   - AA 2xscaled gfx. to its 4x absolute size,   
   - AA hi-res "screens" (640x480) to their 2x size or,
   - AA gfx. back to it's original size (looks nice above 640x480, set scaling to 1.0) 
*/

/*
	VERTEX_SHADER
*/

struct input
{
  float2 video_size;
  float2 texture_size;
  float2 output_size;
  float  frame_count;
  float  frame_direction;
  float frame_rotation;
};


struct VERTEX_OUTPUT
{
  float4 position : POSITION;
  float4 color    : COLOR;
  float2 texCoord : TEXCOORD0;
  float4 t1 : TEXCOORD1;
  float4 t2 : TEXCOORD2;
  float4 t3 : TEXCOORD3;
  float4 t4 : TEXCOORD4;
};


VERTEX_OUTPUT main_vertex
(
	float4 position	: POSITION,
	float4 color	: COLOR,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	VERTEX_OUTPUT OUT;

	OUT.position = mul(modelViewProj, position);
	OUT.color = color;

	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x*0.5;
	float dy = ps.y*0.5;

	OUT.texCoord = texCoord;
	OUT.t1.xy = texCoord + float2(-dx, 0);
	OUT.t2.xy = texCoord + float2( dx, 0);
	OUT.t3.xy = texCoord + float2( 0,-dy);
	OUT.t4.xy = texCoord + float2( 0, dy);
	OUT.t1.zw = texCoord + float2(-dx,-dy);
	OUT.t2.zw = texCoord + float2(-dx, dy);
	OUT.t3.zw = texCoord + float2( dx,-dy);
	OUT.t4.zw = texCoord + float2( dx, dy);

	return OUT;
}


/* 
	FRAGMENT SHADER
*/

struct output 
{
  float4 color    : COLOR;
};


struct VERTEX_INPUT
{
	float4 position : POSITION;
	float2 CT : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float4 t2 : TEXCOORD2;
	float4 t3 : TEXCOORD3;
	float4 t4 : TEXCOORD4;
};


output main_fragment(in VERTEX_INPUT VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) 
{
   output OUT;
   half3 c00 = tex2D(decal, VAR.t1.zw).xyz; 
   half3 c10 = tex2D(decal, VAR.t3.xy).xyz;
   half3 c20 = tex2D(decal, VAR.t3.zw).xyz;
   half3 c01 = tex2D(decal, VAR.t1.xy).xyz;
   half3 c11 = tex2D(decal, VAR.CT).xyz;
   half3 c21 = tex2D(decal, VAR.t2.xy).xyz;
   half3 c02 = tex2D(decal, VAR.t2.zw).xyz;
   half3 c12 = tex2D(decal, VAR.t4.xy).xyz;
   half3 c22 = tex2D(decal, VAR.t4.zw).xyz;

   float d1=dot(abs(c00-c22),dt)+0.0001;
   float d2=dot(abs(c20-c02),dt)+0.0001;
   float hl=dot(abs(c01-c21),dt)+0.0001;
   float vl=dot(abs(c10-c12),dt)+0.0001;

   float k1=0.5*(hl+vl);
   float k2=0.5*(d1+d2);

   float3 t1=(hl*(c10+c12)+vl*(c01+c21)+k1*c11)/(2.5*(hl+vl));
   float3 t2=(d1*(c20+c02)+d2*(c00+c22)+k2*c11)/(2.5*(d1+d2));

   k1=dot(abs(t1-c11),dt)+0.0001;
   k2=dot(abs(t2-c11),dt)+0.0001;

   OUT.color = float4((k1*t2+k2*t1)/(k1+k2),1);
   return OUT;
}
