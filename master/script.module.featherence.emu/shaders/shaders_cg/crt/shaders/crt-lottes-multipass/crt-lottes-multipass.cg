
//
// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER
//
//   by Timothy Lottes
//
// This is more along the style of a really good CGA arcade monitor.
// With RGB inputs instead of NTSC.
// The shadow mask example has the mask rotated 90 degrees for less chromatic aberration.
//
// Left it unoptimized to show the theory behind the algorithm.
//
// It is an example what I personally would want as a display option for pixel art games.
// Please take and use, change, or whatever.
//

// -- config  -- //
#pragma parameter hardScan "hardScan" -8.0 -40.0 0.0 1.0 // default, minimum, maximum, optional step
#pragma parameter warpX "warpX" 0.031 0.0 0.125 0.01
#pragma parameter warpY "warpY" 0.041 0.0 0.125 0.01
#pragma parameter maskDark "maskDark" 0.5 0.0 2.0 0.1
#pragma parameter maskLight "maskLight" 1.5 0.0 2.0 0.1
#pragma parameter shadowMask "shadowMask" 3.0 0.0 4.0 1.0
#pragma parameter brightboost "brightness" 1.0 0.0 2.0 0.05
#pragma parameter hardBloomPix "bloom-x soft" -1.5 -2.0 -0.5 0.1
#pragma parameter hardBloomScan "bloom-y soft" -2.0 -4.0 -1.0 0.1
#pragma parameter bloomAmount "bloom amt" 0.15 0.0 1.0 0.05
#pragma parameter shape "filter kernel shape" 2.0 0.0 10.0 0.05

#ifdef PARAMETER_UNIFORM // If the shader implementation understands #pragma parameters, this is defined.
uniform float hardScan;
uniform float warpX;
uniform float warpY;
uniform float maskDark;
uniform float maskLight;
uniform float shadowMask;
uniform float brightboost;
uniform float hardBloomScan;
uniform float hardBloomPix;
uniform float bloomAmount;
uniform float shape;
#else
#define hardScan -8.0
#define warpX 0.031
#define warpY 0.041
#define maskDark 0.5
#define maskLight 1.5
#define shadowMask 4
#define brightboost 1
#define hardBloomScan -2.0
#define hardBloomPix -1.5
#define bloomAmount 1.0/16.0
#define shape 2.0
#endif

#define DO_BLOOM 1

// ------------- //

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,
   float2 tex : TEXCOORD,
   out float2 oTex : TEXCOORD
)
{
   oPosition = mul(modelViewProj, position);
   oTex = tex;
}

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   float  frame_count;
   float  frame_direction;
   float frame_rotation;
};

struct prev
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   sampler2D texture;
};

input IN_global;
sampler2D s3minus1_global;
sampler2D s3plus1_global;
sampler2D s5minus2_global;
sampler2D s5_global;
sampler2D s5plus2_global;
sampler2D s7minus1_global;
sampler2D s7_global;
sampler2D s7plus1_global;

#define warp float2(warpX,warpY)

//------------------------------------------------------------------------
// Linear to sRGB.
// Assuming using sRGB typed textures this should not be needed.
float ToSrgb1(float c)
{
   return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);
}

float3 ToSrgb(float3 c)
{
   return float3(ToSrgb1(c.r),ToSrgb1(c.g),ToSrgb1(c.b));
}

// Distance in emulated pixels to nearest texel.
float2 Dist(float2 pos){pos=pos*IN_global.texture_size.xy;return -((pos-floor(pos))-float2(0.5));}
    
// 1D Gaussian.
float Gaus(float pos,float scale){return exp2(scale*pow(abs(pos),shape));}

// Return scanline weight.
float Scan(float2 pos,float off){
  float dst=Dist(pos).y;
  return Gaus(dst+off,hardScan);}
  
// Return scanline weight for bloom.
float BloomScan(float2 pos,float off){
  float dst=Dist(pos).y;
  return Gaus(dst+off,hardBloomScan);}

// Allow nearest three lines to effect pixel.
float3 Tri(float2 pos){
  float3 a=tex2D(s3minus1_global, pos).rgb;
  float3 b=tex2D(s5_global, pos).rgb;
  float3 c=tex2D(s3plus1_global, pos).rgb;
  float wa=Scan(pos,-1.0);
  float wb=Scan(pos, 0.0);
  float wc=Scan(pos, 1.0);
  return a*wa+b*wb+c*wc;}
  
// Small bloom.
float3 Bloom(float2 pos){
  float3 a=tex2D(s5minus2_global, pos).rgb;
  float3 b=tex2D(s7minus1_global, pos).rgb;
  float3 c=tex2D(s7_global, pos).rgb;
  float3 d=tex2D(s7plus1_global, pos).rgb;
  float3 e=tex2D(s5plus2_global, pos).rgb;
  float wa=BloomScan(pos,-2.0);
  float wb=BloomScan(pos,-1.0);
  float wc=BloomScan(pos, 0.0);
  float wd=BloomScan(pos, 1.0);
  float we=BloomScan(pos, 2.0);
  return a*wa+b*wb+c*wc+d*wd+e*we;}

// Distortion of scanlines, and end of screen alpha.
float2 Warp(float2 pos){
  pos=pos*2.0-1.0;    
  pos*=float2(1.0+(pos.y*pos.y)*warp.x,1.0+(pos.x*pos.x)*warp.y);
  return pos*0.5+0.5;}

// Shadow mask 
float3 Mask(float2 pos){
  float3 mask=float3(maskDark,maskDark,maskDark);

  // Very compressed TV style shadow mask.
  if (shadowMask == 1) {
    float line=maskLight;
    float odd=0.0;
    if(fract(pos.x/6.0)<0.5)odd=1.0;
    if(fract((pos.y+odd)/2.0)<0.5)line=maskDark;  
    pos.x=fract(pos.x/3.0);
   
    if(pos.x<0.333)mask.r=maskLight;
    else if(pos.x<0.666)mask.g=maskLight;
    else mask.b=maskLight;
    mask*=line;  
  } 

  // Aperture-grille.
  else if (shadowMask == 2) {
    pos.x=fract(pos.x/3.0);

    if(pos.x<0.333)mask.r=maskLight;
    else if(pos.x<0.666)mask.g=maskLight;
    else mask.b=maskLight;
  } 

  // Stretched VGA style shadow mask (same as prior shaders).
  else if (shadowMask == 3) {
    pos.x+=pos.y*3.0;
    pos.x=fract(pos.x/6.0);

    if(pos.x<0.333)mask.r=maskLight;
    else if(pos.x<0.666)mask.g=maskLight;
    else mask.b=maskLight;
  }

  // VGA style shadow mask.
  else if (shadowMask == 4) {
    pos.xy=floor(pos.xy*float2(1.0,0.5));
    pos.x+=pos.y*3.0;
    pos.x=fract(pos.x/6.0);

    if(pos.x<0.333)mask.r=maskLight;
    else if(pos.x<0.666)mask.g=maskLight;
    else mask.b=maskLight;
  }

  return mask;}    

float4 main_fragment (float2 tex : TEXCOORD,
uniform sampler2D s0 : TEXUNIT0,
uniform input IN,
uniform prev PASSPREV,
uniform prev PASSPREV1,
uniform prev PASSPREV2,
uniform prev PASSPREV3,
uniform prev PASSPREV4,
uniform prev PASSPREV5,
uniform prev PASSPREV6,
uniform prev PASSPREV7,
uniform prev PASSPREV8) : COLOR
{
  float2 pos=Warp(tex.xy*(IN.texture_size.xy/IN.video_size.xy))*(IN.video_size.xy/IN.texture_size.xy);
	s3minus1_global	=	PASSPREV8.texture;
	s3plus1_global	=	PASSPREV7.texture;
	s5minus2_global	=	PASSPREV6.texture;
	s5_global		=	PASSPREV5.texture;
	s5plus2_global	=	PASSPREV4.texture;
	s7minus1_global	=	PASSPREV3.texture;
	s7_global		=	PASSPREV2.texture;
	s7plus1_global	=	PASSPREV1.texture;
	IN_global		=	IN;
	float3 outColor	=	Tri(pos);

  #ifdef DO_BLOOM
  
  //Add Bloom
  outColor.rgb+=Bloom(pos)*bloomAmount;

  #endif

  if(shadowMask)
    outColor.rgb*=Mask(floor(tex.xy*(IN.texture_size.xy/IN.video_size.xy)*IN.output_size.xy)+float2(0.5,0.5));
	outColor.rgb *= vec3(brightboost);

  return float4(ToSrgb(outColor.rgb),1.0);
}
