struct data
{
   float2 tex;
   float pix_no;
   float one;
};

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
};

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,
   float2 tex : TEXCOORD,
   uniform input IN,
   out data oData
)
{
   oPosition = mul(modelViewProj, position);
   oData.tex = tex;
   oData.pix_no = tex.x * IN.texture_size.x;
   oData.one = 1.0 / IN.texture_size.x;
}

#define PI 3.14159265359

float sinc(float x)
{
   if (abs(x) < 0.001)
      return 1.0;
   else
   {
      x *= PI;
      return sin(x) / x;
   }
}

#define BOOST 1.0

float4 main_fragment (uniform input IN, in data vertex, uniform sampler2D s0 : TEXUNIT0) : COLOR
{
#define TEX(off_x) tex2D(s0, tex + float2(float(off_x) * vertex.one, 0.0)).rgb

   float texel = floor(vertex.pix_no);
   float phase = vertex.pix_no - texel;
   float base_phase = phase.x - 0.5;
   float2 tex = float2((texel + 0.5) / IN.texture_size.x, vertex.tex.y);

   float3 col = float3(0.0);
   for (int i = -2; i <= 2; i++)
   {
      float phase = base_phase - float(i);
      if (abs(phase) < 2.0)
      {
         float g = BOOST * sinc(phase) * sinc(0.5 * phase);
         col += TEX(i) * g;
      }
   }

   return float4(col, 1.0);
}

