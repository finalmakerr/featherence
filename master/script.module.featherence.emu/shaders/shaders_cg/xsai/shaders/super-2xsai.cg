/*
	VERTEX_SHADER
*/
void main_vertex
(
	float4 position	: POSITION,
	float4 color	: COLOR,
	float2 texCoord : TEXCOORD0,

    uniform float4x4 modelViewProj,

	out float4 oPosition : POSITION,
	out float4 oColor    : COLOR,
	out float2 otexCoord : TEXCOORD
)
{
	oPosition = mul(modelViewProj, position);
	oColor = color;
	otexCoord = texCoord;
}


/* 
	FRAGMENT SHADER
*/
const float3 dtt = float3(65536,255,1);

struct output 
{
  float4 color    : COLOR;
};

struct input
{
  float2 video_size;
  float2 texture_size;
  float2 output_size;
  float frame_count;
  float frame_direction;
  float frame_rotation;
};


/*  GET_RESULT function                            */
/*  Copyright (c) 1999-2001 by Derek Liauw Kie Fa  */
/*  License: GNU-GPL                               */
int GET_RESULT(float A, float B, float C, float D)
{
	int x = 0; int y = 0; int r = 0;
	if (A == C) x+=1; else if (B == C) y+=1;
	if (A == D) x+=1; else if (B == D) y+=1;
	if (x <= 1) r+=1; 
	if (y <= 1) r-=1;
	return r;
} 


float reduce(float3 color)
{ 
	return dot(color, dtt);
}


output main_fragment(float2 texCoord : TEXCOORD0, uniform sampler2D decal : TEXUNIT0, uniform input IN)
{
	output OUT;

	// get texel size   	
	float2 ps = float2(0.999/IN.texture_size.x, 0.999/IN.texture_size.y);
  	
	// calculating offsets, coordinates

	float2 dx = float2( ps.x, 0.0); 
	float2 dy = float2( 0.0, ps.y);
	float2 g1 = float2( ps.x,ps.y);
	float2 g2 = float2(-ps.x,ps.y);	
	
	float2 pixcoord  = texCoord/ps;
	float2 fp        = frac(pixcoord);
	float2 pC4       = texCoord-fp*ps;
	float2 pC8       = pC4+g1;

	

	// Reading the texels

	float3 C0 = tex2D(decal,pC4-g1).xyz; 
	float3 C1 = tex2D(decal,pC4-dy).xyz;
	float3 C2 = tex2D(decal,pC4-g2).xyz;
	float3 D3 = tex2D(decal,pC4-g2+dx).xyz;
	float3 C3 = tex2D(decal,pC4-dx).xyz;
	float3 C4 = tex2D(decal,pC4   ).xyz;
	float3 C5 = tex2D(decal,pC4+dx).xyz;
	float3 D4 = tex2D(decal,pC8-g2).xyz;
	float3 C6 = tex2D(decal,pC4+g2).xyz;
	float3 C7 = tex2D(decal,pC4+dy).xyz;
	float3 C8 = tex2D(decal,pC4+g1).xyz;
	float3 D5 = tex2D(decal,pC8+dx).xyz;
	float3 D0 = tex2D(decal,pC4+g2+dy).xyz;
	float3 D1 = tex2D(decal,pC8+g2).xyz;
	float3 D2 = tex2D(decal,pC8+dy).xyz;
	float3 D6 = tex2D(decal,pC8+g1).xyz;

	float3 p00,p10,p01,p11;


	// reducing float3 to float
	
	float c0 = reduce(C0);float c1 = reduce(C1);
	float c2 = reduce(C2);float c3 = reduce(C3);
	float c4 = reduce(C4);float c5 = reduce(C5);
	float c6 = reduce(C6);float c7 = reduce(C7);
	float c8 = reduce(C8);float d0 = reduce(D0);
	float d1 = reduce(D1);float d2 = reduce(D2);
	float d3 = reduce(D3);float d4 = reduce(D4);
	float d5 = reduce(D5);float d6 = reduce(D6);




    /*              Super2xSaI code               */
    /*  Copied from the Dosbox source code        */
    /*  Copyright (C) 2002-2007  The DOSBox Team  */
    /*  License: GNU-GPL                          */
    /*  Adapted by guest(r) on 19.4.2007          */

     
	if (c7 == c5 && c4 != c8) {
		p11 = p01 = C7;
	} else if (c4 == c8 && c7 != c5) {
		p11 = p01 = C4;
	} else if (c4 == c8 && c7 == c5) {
		int r = 0;
		r += GET_RESULT(c5,c4,c6,d1);
		r += GET_RESULT(c5,c4,c3,c1);
		r += GET_RESULT(c5,c4,d2,d5);
		r += GET_RESULT(c5,c4,c2,d4);

		if (r > 0)
			p11 = p01 = C5;
		else if (r < 0)
			p11 = p01 = C4;
		else {
			p11 = p01 = 0.5*(C4+C5);
		}
	} else {
		if (c5 == c8 && c8 == d1 && c7 != d2 && c8 != d0)
			p11 = 0.25*(3.0*C8+C7);
		else if (c4 == c7 && c7 == d2 && d1 != c8 && c7 != d6)
			p11 = 0.25*(3.0*C7+C8);
		else
			p11 = 0.5*(C7+C8);

		if (c5 == c8 && c5 == c1 && c4 != c2 && c5 != c0)
			p01 = 0.25*(3.0*C5+C4);
		else if (c4 == c7 && c4 == c2 && c1 != c5 && c4 != d3)
			p01 = 0.25*(3.0*C4+C5);
		else
			p01 = 0.5*(C4+C5);
	}

	if (c4 == c8 && c7 != c5 && c3 == c4 && c4 != d2)
		p10 = 0.5*(C7+C4);
	else if (c4 == c6 && c5 == c4 && c3 != c7 && c4 != d0)
		p10 = 0.5*(C7+C4);
	else
		p10 = C7;

	if (c7 == c5 && c4 != c8 && c6 == c7 && c7 != c2)
		p00 = 0.5*(C7+C4);
	else if (c3 == c7 && c8 == c7 && c6 != c4 && c7 != c0)
		p00 = 0.5*(C7+C4);
	else
		p00 = C4;


	// Distributing the four products
	
	if (fp.x < 0.50)
		{ if (fp.y < 0.50) p10 = p00;}
	else
		{ if (fp.y < 0.50) p10 = p01; else p10 = p11;}


	// OUTPUT
	OUT.color = float4(p10, 1);
	return OUT;
}

