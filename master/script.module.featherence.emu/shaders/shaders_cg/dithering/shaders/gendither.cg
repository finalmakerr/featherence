/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

void main_vertex
(
	float4 position	: POSITION,
	float4 color	: COLOR,
	float2 texCoord : TEXCOORD0,

    uniform float4x4 modelViewProj,

	out float4 oPosition : POSITION,
	out float4 oColor    : COLOR,
	out float2 otexCoord : TEXCOORD
)
{
	oPosition = mul(modelViewProj, position);
	oColor = color;
	otexCoord = texCoord;
}

struct output 
{
  float4 color    : COLOR;
};

struct input
{
  float2 video_size;
  float2 texture_size;
  float2 output_size;
  float  frame_count;
  float  frame_direction;
  float frame_rotation;
};

// Gendither
// 
// 	Copyright (C) 2013-2014 leilei
// 
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.

// This table is a lazy jailbar pattern
float erroredtable[16] = {
	0,1,0,1,   
	16,15,16,15,
	0,1,0,1,   
	16,15,16,15
};

output main_fragment(float2 texCoord : TEXCOORD0, uniform sampler2D decal : TEXUNIT0, uniform input IN) 
{
   	output OUT;
	OUT.color = tex2D(decal, texCoord);


	float2 res;
	res.x = IN.texture_size.x;
	res.y = IN.texture_size.y;
	
	float2 ditheu = texCoord.xy * res.xy;

	ditheu.x = texCoord.x * res.x;
	ditheu.y = texCoord.y * res.y;

	//
	// Dither
	//

	int ditdex = 	int(fmod(ditheu.x, 4.0)) * 4 + int(fmod(ditheu.y, 4.0)); // 4x4!
	int3 color;
	int3 colord;
	color.r = OUT.color.r * 224;
	color.g = OUT.color.g * 224;
	color.b = OUT.color.b * 224;
	int yeh = 0;
	int ohyes = 0;


	// looping through a lookup table matrix
	//for (yeh=ditdex; yeh<(ditdex+16); yeh++) ohyes = pow(erroredtable[yeh-15], 0.72f);
	// Unfortunately, RetroArch doesn't support loops so I have to unroll this. =(

	if (yeh++==ditdex) ohyes = erroredtable[0];
	else if (yeh++==ditdex) ohyes = erroredtable[1];
	else if (yeh++==ditdex) ohyes = erroredtable[2];
	else if (yeh++==ditdex) ohyes = erroredtable[3];
	else if (yeh++==ditdex) ohyes = erroredtable[4];
	else if (yeh++==ditdex) ohyes = erroredtable[5];
	else if (yeh++==ditdex) ohyes = erroredtable[6];
	else if (yeh++==ditdex) ohyes = erroredtable[7];
	else if (yeh++==ditdex) ohyes = erroredtable[8];
	else if (yeh++==ditdex) ohyes = erroredtable[9];
	else if (yeh++==ditdex) ohyes = erroredtable[10];
	else if (yeh++==ditdex) ohyes = erroredtable[11];
	else if (yeh++==ditdex) ohyes = erroredtable[12];
	else if (yeh++==ditdex) ohyes = erroredtable[13];
	else if (yeh++==ditdex) ohyes = erroredtable[14];
	else if (yeh++==ditdex) ohyes = erroredtable[15];

	colord.r = color.r + ohyes;
	colord.g = color.g + ohyes;
	colord.b = color.b + ohyes;
	OUT.color.rgb = colord.rgb * 0.003921568627451; // divide by 255, i don't trust em


	//
	// Reduce color depth
	//

	float3 why = 1;
	float3 reduceme = 1;
	float radooct = 5;	// 32 is usually the proper value

	reduceme.r = pow(OUT.color.r, why);  
	reduceme.r *= radooct;	
	reduceme.r = int(floor(reduceme.r));	
	reduceme.r /= radooct; 
	reduceme.r = pow(reduceme.r, why);

	reduceme.g = pow(OUT.color.g, why);  
	reduceme.g *= radooct;	
	reduceme.g = int(floor(reduceme.g));	
	reduceme.g /= radooct; 
	reduceme.g = pow(reduceme.g, why);

	reduceme.b = pow(OUT.color.b, why);  
	reduceme.b *= radooct;	
	reduceme.b = int(floor(reduceme.b));	
	reduceme.b /= radooct; 
	reduceme.b = pow(reduceme.b, why);

	//
	// Brightness cap
	//

	if (reduceme.r > 224) reduceme.r = 224;
	if (reduceme.g > 224) reduceme.g = 224;
	if (reduceme.b > 224) reduceme.b = 224;


	OUT.color.rgb = reduceme.rgb;



   return OUT;
}
