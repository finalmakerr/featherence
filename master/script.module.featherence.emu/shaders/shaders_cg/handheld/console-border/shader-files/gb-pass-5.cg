#pragma parameter SCALE "Box Scale" 0.6667 0.6667 1.5 0.33333
#pragma parameter OUT_X "Out X" 1600.0 1600.0 4800.0 8000.0
#pragma parameter OUT_Y "Out Y" 800.0 800.0 2400.0 400.0
#ifdef PARAMETER_UNIFORM
uniform float SCALE;
uniform float OUT_X;
uniform float OUT_Y;
#else
#define SCALE 0.6667
#define OUT_X 1600.0
#define OUT_Y 800.0
#endif

///////////////////////////////////////////////////////////////////////////
//                                                                       //
// DMG Shader v1.2                                                       //
//                                                                       //
// Author: Hi-Ban                                                        //
//                                                                       //
// This is a modification and mix of other shaders. Although some bits   //
// of code have been modified to achieve a more realistic look, all the  //
// original credits and licenses of the various codes have been left     //
// intact in the shader files.                                           //
//                                                                       //
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
//                                                                       //
// Author: Themaister                                                    //
// License: Public domain                                                //
//                                                                       //
///////////////////////////////////////////////////////////////////////////

// Border shader. 2x input scale, 1600x800 border. :)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//config                                                                                                                                  //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//structs                                                                                                                                 //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct input
{
   float2 video_size;
   float2 texture_size;
   float2 output_size;
   float frame_count;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//vertex definitions                                                                                                                      //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//const float box_scale = SCALE; // 1x scale. (4x FBO)
//const float2 out_res = float2(OUT_X, OUT_Y); // Output target size.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//vertex shader                                                                                                                           //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,

   float2 tex : TEXCOORD,
   out float2 oTex : TEXCOORD,

   float2 tex_border : TEXCOORD1,
   out float2 otex_border : TEXCOORD1,

   uniform input IN
)
{
   oPosition = mul(modelViewProj, position);
   
   float2 scale = (IN.output_size / IN.video_size) / SCALE;
   float2 middle = 0.5 * IN.video_size / IN.texture_size;
   float2 diff = tex.xy - middle;
   oTex = middle + diff * scale;

   middle = float2(0.5, 0.5);
   float2 dist = tex_border - middle;
   otex_border = middle + dist * IN.output_size / float2(OUT_X, OUT_Y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//fragment definitions                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//fragment shader                                                                                                                         //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float4 main_fragment (
   float2 tex : TEXCOORD0, float2 tex_border : TEXCOORD1,
   uniform sampler2D s0 : TEXUNIT0,
   uniform sampler2D BORDER,
   uniform input IN) : COLOR
{
   float4 frame = tex2D(s0, tex);
   float4 border = tex2D(BORDER, tex_border);
   return lerp(frame, border, border.a);
}