/*
Adapted for RetroArch from Flyguy's "Apple II-Like Artifact Colors" from shadertoy:
https://www.shadertoy.com/view/llyGzR

"Colors created through NTSC artifacting on 4-bit patterns, similar to the Apple II's lo-res mode."
*/ 

/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
   - FX11 compilers
*/

//#pragma parameter FIR_SIZE "FIR Size" 29.0 1.0 50.0 1.0
//#pragma parameter F_COL "F Col" 0.25 0.25 0.5 0.25
//#pragma parameter F_LUMA_LP "F Luma LP" 0.16667 0.0001 0.333333 0.02
#pragma parameter F_COL_BW "F Col BW" 50.0 10.0 200.0 1.0
#ifdef PARAMETER_UNIFORM
uniform float F_COL;
uniform float F_LUMA_LP;
uniform float F_COL_BW;
#else
#define F_COL 0.25
#define F_LUMA_LP 0.16667
#define F_COL_BW 50.0
#endif

#include "../../../compat_includes.inc"
uniform COMPAT_Texture2D(decal) : TEXUNIT0;
uniform float4x4 modelViewProj;

struct out_vertex
{
	float4 position : COMPAT_POS;
	float2 texCoord : TEXCOORD0;
};

out_vertex main_vertex(COMPAT_IN_VERTEX)
{
#ifdef HLSL_4
	float4 position = VIN.position;
	float2 texCoord = VIN.texCoord;
#endif
	out_vertex OUT;
	OUT.position = mul(modelViewProj, position);
	OUT.texCoord = texCoord;
	
	return OUT;
}

//Demodulator

//#define F_COL (1.0 / 4.0) // moved to parameter
//#define F_LUMA_LP (1.0 / 6.0) // moved to parameter
//#define F_COL_BW (1.0 / 50.0) // moved to parameter


#define FIR_SIZE 29

float pi = 3.141592654;//atan(1.0)*4.0;
float tau = 6.283185308;//atan(1.0)*8.0;

//Non-normalized texture sampling.
float4 sample2D(COMPAT_Texture2D(tex), float2 resolution, float2 uv)
{
    return COMPAT_Sample(tex, uv / resolution);
}

//Complex multiply
float2 cmul(float2 a, float2 b)
{
   return float2((a.x * b.x) - (a.y * b.y), (a.x * b.y) + (a.y * b.x));
}

float sinc(float x)
{
	return (x == 0.0) ? 1.0 : sin(x*pi)/(x*pi);   
}

//https://en.wikipedia.org/wiki/Window_function
float WindowBlackman(float a, int N, int i)
{
    float a0 = (1.0 - a) / 2.0;
    float a1 = 0.5;
    float a2 = a / 2.0;
    
    float wnd = a0;
    wnd -= a1 * cos(2.0 * pi * (float(i) / float(N - 1)));
    wnd += a2 * cos(4.0 * pi * (float(i) / float(N - 1)));
    
    return wnd;
}

//FIR lowpass filter 
//Fc = Cutoff freq., Fs = Sample freq., N = # of taps, i = Tap index
float Lowpass(float Fc, float Fs, int N, int i)
{    
    float wc = (Fc/Fs);
    
    float wnd = WindowBlackman(0.16, N, i);
    
    return 2.0*wc * wnd * sinc(2.0*wc * float(i - N/2));
}

//FIR bandpass filter 
//Fa/Fb = Low/High cutoff freq., Fs = Sample freq., N = # of taps, i = Tap index
float Bandpass(float Fa, float Fb, float Fs, int N, int i)
{    
    float wa = (Fa/Fs);
    float wb = (Fb/Fs);
    
    float wnd = WindowBlackman(0.16, N, i);
    
    return 2.0*(wb-wa) * wnd * (sinc(2.0*wb * float(i - N/2)) - sinc(2.0*wa * float(i - N/2)));
}

//Complex oscillator, Fo = Oscillator freq., Fs = Sample freq., n = Sample index
float2 Oscillator(float Fo, float Fs, float N)
{
    float phase = (tau*Fo*floor(N))/Fs;
    return float2(cos(phase),sin(phase));
}

#define gl_FragCoord float2((texCoord.xy * float2(output_size.xy))*(texture_size.xy/video_size.xy))

#define macroloop(i) tpidx = int(FIR_SIZE) - i - 1; \
        lp = Lowpass(Flumlp, Fs, int(FIR_SIZE), tpidx); \
        bp = Bandpass(Fcol - Fcolbw, Fcol + Fcolbw, Fs, int(FIR_SIZE), tpidx); \
        y_sig += sample2D(decal, texture_size.xy, float2(n - float(i), (gl_FragCoord.y))).r * lp; \
        iq_sig += sample2D(decal, texture_size.xy, float2(n - float(i), (gl_FragCoord.y))).r * bp;

float4 artifact_colors1(float2 texture_size, float2 video_size, float2 output_size, float2 texCoord, COMPAT_Texture2D(decal))
{
    float Fs = texture_size.x;
    float Fcol = Fs * F_COL;
    float Fcolbw = Fs * (1.0 / F_COL_BW);
    float Flumlp = Fs * F_LUMA_LP;
    float n = floor(gl_FragCoord.x);
    
    float y_sig = 0.0;    
    float iq_sig = 0.0;
    
    float2 cOsc = Oscillator(Fcol, Fs, n);
	
    n += float(FIR_SIZE)/2.0;
    
    //Separate luma(Y) & chroma(IQ) signals
	int tpidx;
	float lp;
	float bp;
/*    for(int i = 0;i < FIR_SIZE;i++)
    {
        int tpidx = int(FIR_SIZE) - i - 1;
        float lp = Lowpass(Flumlp, Fs, int(FIR_SIZE), tpidx);
        float bp = Bandpass(Fcol - Fcolbw, Fcol + Fcolbw, Fs, int(FIR_SIZE), tpidx);
        
        y_sig += sample2D(decal, texture_size.xy, float2(n - float(i), (gl_FragCoord.y))).r * lp;
        iq_sig += sample2D(decal, texture_size.xy, float2(n - float(i), (gl_FragCoord.y))).r * bp;
    }
*/

    macroloop(0)
    macroloop(1)
    macroloop(2)
    macroloop(3)
    macroloop(4)
    macroloop(5)
    macroloop(6)
    macroloop(7)
    macroloop(8)
    macroloop(9)
    macroloop(10)
    macroloop(11)
    macroloop(12)
    macroloop(13)
    macroloop(14)
    macroloop(15)
    macroloop(16)
    macroloop(17)
    macroloop(18)
    macroloop(19)
    macroloop(20)
    macroloop(21)
    macroloop(22)
    macroloop(23)
    macroloop(24)
    macroloop(25)
    macroloop(26)
    macroloop(27)
    macroloop(28)
    
    //Shift IQ signal down from Fcol to DC 
    float2 iq_sig_mix = cmul(float2(iq_sig, 0.), cOsc);
    
   float4 final = float4(y_sig, iq_sig_mix, 0.);
   return final;
}

float4 main_fragment(COMPAT_IN_FRAGMENT) : COMPAT_Output
{
	return artifact_colors1(COMPAT_texture_size, COMPAT_video_size, COMPAT_output_size, VOUT.texCoord, decal);
}
COMPAT_END