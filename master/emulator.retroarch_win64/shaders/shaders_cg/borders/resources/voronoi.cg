// Based on Voronoi - smooth Shadertoy - https://www.shadertoy.com/view/ldB3zc
// Created by inigo quilez - iq/2014
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

#pragma parameter aspect_x "Aspect Ratio Numerator" 64.0 1.0 256. 1.0
#pragma parameter aspect_y "Aspect Ratio Denominator" 49.0 1.0 256. 1.0
#pragma parameter integer_scale "Force Integer Scaling" 1.0 0.0 1.0 1.0
#pragma parameter overscale "Integer Overscale" 0.0 0.0 1.0 1.0
#pragma parameter scanline_toggle "Scanline Toggle" 0.0 0.0 1.0 1.0
#pragma parameter interp_toggle "Sharpen Linear Scaling" 0.0 0.0 1.0 1.0
#pragma parameter THICKNESS "Scanline Thickness" 2.0 1.0 12.0 1.0
#pragma parameter DARKNESS "Scanline Darkness" 0.35 0.0 1.0 0.05
#ifdef PARAMETER_UNIFORM
uniform float aspect_x;
uniform float aspect_y;
uniform float integer_scale;
uniform float overscale;
uniform float scanline_toggle;
uniform float THICKNESS;
uniform float DARKNESS;
uniform float interp_toggle;
#else
#define aspect_x 64.0
#define aspect_y 49.0
#define integer_scale 1.0
#define overscale 0.0
#define scanline_toggle 0.0
#define THICKNESS 2.0
#define DARKNESS 0.35
#define interp_toggle 0.0
#endif
// END PARAMETERS //

#include "../../compat_includes.inc"

uniform COMPAT_Texture2D(decal) : TEXUNIT0;
uniform float4x4 modelViewProj;

struct out_vertex{
   float4 position : COMPAT_POS;
   float2 texCoord : TEXCOORD;
   float2 tex_border : TEXCOORD1;
};

out_vertex main_vertex(COMPAT_IN_VERTEX)
{
#ifdef HLSL_4
	float4 position = VIN.position;
	float2 texCoord = VIN.texCoord;
	float2 t1 = VIN.t1;
#endif
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	float2 out_res = COMPAT_output_size;
	float2 corrected_size = COMPAT_video_size * float2(aspect_x / aspect_y, 1.0)
		 * float2(COMPAT_video_size.y / COMPAT_video_size.x, 1.0);
	float full_scale = (integer_scale > 0.5) ? floor(COMPAT_output_size.y /
		COMPAT_video_size.y) + overscale : COMPAT_output_size.y / COMPAT_video_size.y;
	float2 scale = (COMPAT_output_size / corrected_size) / full_scale;
	float2 middle = float2(0.49999, 0.49999) * COMPAT_video_size / COMPAT_texture_size;
	float2 diff = texCoord.xy - middle;
	OUT.texCoord = middle + diff * scale;

	float2 dist = t1 - middle;
	OUT.tex_border = texCoord;
	return OUT;
}

#define fragcoord (tex.xy * (texture_size.xy/video_size.xy))

float4 conv_background(float4 back, float2 coord, float frame_count)
{
   return float4(back.rgb, back.a);
}

float4 scanlines(float4 frame, float2 coord, float2 texture_size, float2
	video_size, float2 output_size)
{
	float lines = fract(coord.y * texture_size.y);
	float scale_factor = floor((output_size.y / video_size.y) + 0.4999);
	return (scanline_toggle > 0.5 && (lines < (1.0 / scale_factor * THICKNESS)))
		? frame * vec4(1.0 - DARKNESS) : frame;
}

float2 interp_coord(float2 coord, float2 texture_size)
{
	vec2 p = coord.xy;

	p = p * texture_size.xy + vec2(0.5, 0.5);

	vec2 i = floor(p);
	vec2 f = p - i;

	// Smoothstep - amazingly, smoothstep() is slower than calculating directly the expression!
	f = f * f * f * f * (f * (f * (-20.0 * f + vec2(70.0, 70.0)) - vec2(84.0, 84.0)) + vec2(35.0, 35.0));

	p = i + f;

	p = (p - vec2(0.5, 0.5)) * 1.0 / texture_size;
	return p;
}

float hash1( float n )
{
	return frac(sin(n)*43758.5453);
}

float2 hash2( float2  p )
{
	p = float2( dot(p,float2(127.1,311.7)), dot(p,float2(269.5,183.3)) );
	return frac(sin(p)*43758.5453);
}

float4 voronoi( in float2 x, float w, float frame_count )
{
    float2 n = floor( x );
    float2 f = frac( x );

	float4 m = float4( 8.0, 0.0, 0.0, 0.0 );
    for( int j=-1; j<=2; j++ )
    for( int i=-1; i<=2; i++ )
    {
        float2 g = float2( float(i),float(j) );
        float2 o = hash2( n + g );
		
		// animate
        o = 0.5 + 0.5*sin( 0.01 * frame_count + 6.2831*o );

        // distance to cell		
		float d = length(g - f + o);
		
        // do the smooth min for colors and distances		
		float3 col = 0.5 + 0.5*sin( hash1(dot(n+g,float2(7.0,113.0)))*2.5 + 3.5 + float3(2.0,3.0,0.0));
		float h = smoothstep( 0.0, 1.0, 0.5 + 0.5*(m.x-d)/w );
		
	    m.x   = lerp( m.x,     d, h ) - h*(1.0-h)*w/(1.0+3.0*w); // distance
		m.yzw = lerp( m.yzw, col, h ) - h*(1.0-h)*w/(1.0+3.0*w); // cioloe
    }
	
	return m;
}

float4 voronoi_bg(float2 texture_size, float frame_count, float2 uv)
{
    float2 p = uv * float2(2.0,1.0);
	
	float k = 2.0 + 70.0 * pow( 0.5 + 0.5*sin(0.25*6.2831*0.03 * frame_count), 4.0 );
	k = 0.5 - 0.5*cos(0.25*6.2831*0.01 * frame_count);
    float4 c = voronoi( 6.0*p, k, frame_count );

    float3 col = c.yzw;
	
	col *= 1.0 - 0.8*c.x*step(p.y,0.33);
	col *= lerp(c.x,1.0,step(p.y,0.66));
	
	col *= smoothstep( 0.005, 0.007, abs(p.y-0.33) );
	col *= smoothstep( 0.005, 0.007, abs(p.y-0.66) );
	
	return float4( col, 1.0 );
}

float4 border(float2 texture_size, float2 video_size, float2 output_size,
	float frame_count, float2 tex, COMPAT_Texture2D(decal), float2 tex_border)
{
	float4 effect = voronoi_bg(texture_size, frame_count, tex_border * (texture_size / video_size)
	 * float2(output_size.x / output_size.y * 0.5, 1.0));
	
	float2 coord = (interp_toggle < 0.5) ? tex : interp_coord(tex, texture_size);
	float4 frame = COMPAT_SamplePoint(decal, coord);
	frame = scanlines(frame, tex, texture_size, video_size, output_size);
	if (fragcoord.x < 1.0 && fragcoord.x > 0.0 && fragcoord.y < 1.0 && fragcoord.y > 0.0)
		return frame;
	
	else return effect;
}

float4 main_fragment(COMPAT_IN_FRAGMENT) : COMPAT_Output
{
	return border(COMPAT_texture_size, COMPAT_video_size, COMPAT_output_size,
		COMPAT_frame_count, VOUT.texCoord, decal, VOUT.tex_border);
}
COMPAT_END
