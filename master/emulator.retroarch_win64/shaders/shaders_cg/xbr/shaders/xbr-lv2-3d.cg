#pragma parameter XBR_SCALE "xBR Scale" 3.0 1.0 5.0 1.0
#pragma parameter XBR_Y_WEIGHT "Y Weight" 48.0 0.0 100.0 1.0
#pragma parameter XBR_EQ_THRESHOLD "Eq Threshold" 15.0 0.0 50.0 1.0
#pragma parameter XBR_LV1_COEFFICIENT "Lv1 Coefficient" 0.5 0.0 30.0 0.5
#pragma parameter XBR_LV2_COEFFICIENT "Lv2 Coefficient" 2.0 1.0 3.0 0.1
#pragma parameter XBR_RES "Internal Res Multiplier" 2.0 1.0 7.0 1.0
#ifdef PARAMETER_UNIFORM
uniform float XBR_SCALE;
uniform float XBR_Y_WEIGHT;
uniform float XBR_EQ_THRESHOLD;
uniform float XBR_LV1_COEFFICIENT;
uniform float XBR_LV2_COEFFICIENT;
uniform float XBR_RES;
#else
#define XBR_SCALE 3.0
#define XBR_Y_WEIGHT 48.0
#define XBR_EQ_THRESHOLD 15.0
#define XBR_LV1_COEFFICIENT 0.5
#define XBR_LV2_COEFFICIENT 2.0
#define XBR_RES 2.0
#endif
// END PARAMETERS //

/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/


/*
   Hyllian's xBR-lv2-3d Shader
   
   Copyright (C) 2011/2016 Hyllian - sergiogdb@gmail.com

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is 
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   Incorporates some of the ideas from SABR shader. Thanks to Joshua Street.
*/

// Uncomment just one of the three params below to choose the corner detection
//#define CORNER_A
//#define CORNER_B
#define CORNER_C
//#define CORNER_D

#ifndef CORNER_A
  #define SMOOTH_TIPS
#endif

const static float4 Ao = float4( 1.0, -1.0, -1.0, 1.0 );
const static float4 Bo = float4( 1.0,  1.0, -1.0,-1.0 );
const static float4 Co = float4( 1.5,  0.5, -0.5, 0.5 );
const static float4 Ax = float4( 1.0, -1.0, -1.0, 1.0 );
const static float4 Bx = float4( 0.5,  2.0, -0.5,-2.0 );
const static float4 Cx = float4( 1.0,  1.0, -0.5, 0.0 );
const static float4 Ay = float4( 1.0, -1.0, -1.0, 1.0 );
const static float4 By = float4( 2.0,  0.5, -2.0,-0.5 );
const static float4 Cy = float4( 2.0,  0.0, -1.0, 0.5 );
const static float4 Ci = float4(0.25, 0.25, 0.25, 0.25);

const static float3 Y = float3(0.2126, 0.7152, 0.0722);

float4 df(float4 A, float4 B)
{
	return float4(abs(A-B));
}

float c_df(float3 c1, float3 c2)
{
	float3 df = abs(c1 - c2);
	return df.r + df.g + df.b;
}

bool4 eq(float4 A, float4 B)
{
	return (df(A, B) < float4(XBR_EQ_THRESHOLD));
}

float4 weighted_distance(float4 a, float4 b, float4 c, float4 d, float4 e, float4 f, float4 g, float4 h)
{
	return (df(a,b) + df(a,c) + df(d,e) + df(d,f) + 4.0*df(g,h));
}



struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
};


struct out_vertex {
	float4 position  : POSITION;
	float4 color     : COLOR;
	float2 texCoord  : TEXCOORD0;
	float4 t1        : TEXCOORD1;
};

/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	 : POSITION,
	float4 color	 : COLOR,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);
	OUT.color = color;

	float2 ps = XBR_RES/IN.texture_size;
	float dx = ps.x;
	float dy = ps.y;

	//    A1 B1 C1
	// A0  A  B  C C4
	// D0  D  E  F F4
	// G0  G  H  I I4
	//    G5 H5 I5

	OUT.texCoord = texCoord;
	OUT.t1 = float4( dx,  0,  0, dy); // F H

	return OUT;
}


/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	bool4 edri, edr, edr_left, edr_up, px; // px = pixel, edr = edge detection rule
	bool4 interp_restriction_lv0, interp_restriction_lv1, interp_restriction_lv2_left, interp_restriction_lv2_up, block_3d, block_3d_left, block_3d_up;
	float4 fx, fx_left, fx_up; // inequations of straight lines.

	float4 delta         = float4(1.0/XBR_SCALE, 1.0/XBR_SCALE, 1.0/XBR_SCALE, 1.0/XBR_SCALE);
	float4 deltaL        = float4(0.5/XBR_SCALE, 1.0/XBR_SCALE, 0.5/XBR_SCALE, 1.0/XBR_SCALE);
	float4 deltaU        = deltaL.yxwz;

	float2 fp = frac(VAR.texCoord*IN.texture_size/XBR_RES);

	float2 tex = (floor(VAR.texCoord*IN.texture_size/XBR_RES) + float2(0.5, 0.5))*XBR_RES/IN.texture_size;

	float2 dx = VAR.t1.xy;
	float2 dy = VAR.t1.zw;

	float3 A = tex2D(decal, VAR.texCoord -dx -dy).xyz;
	float3 B = tex2D(decal, VAR.texCoord     -dy).xyz;
	float3 C = tex2D(decal, VAR.texCoord +dx -dy).xyz;
	float3 D = tex2D(decal, VAR.texCoord -dx    ).xyz;
	float3 E = tex2D(decal, VAR.texCoord        ).xyz;
	float3 F = tex2D(decal, VAR.texCoord +dx    ).xyz;
	float3 G = tex2D(decal, VAR.texCoord -dx +dy).xyz;
	float3 H = tex2D(decal, VAR.texCoord     +dy).xyz;
	float3 I = tex2D(decal, VAR.texCoord +dx +dy).xyz;

	float3  A1 = tex2D(decal, VAR.texCoord     -dx -2.0*dy).xyz;
	float3  B1 = tex2D(decal, VAR.texCoord         -2.0*dy).xyz;
	float3  C1 = tex2D(decal, VAR.texCoord     +dx -2.0*dy).xyz;
	float3  G5 = tex2D(decal, VAR.texCoord     -dx +2.0*dy).xyz;
	float3  H5 = tex2D(decal, VAR.texCoord         +2.0*dy).xyz;
	float3  I5 = tex2D(decal, VAR.texCoord     +dx +2.0*dy).xyz;
	float3  A0 = tex2D(decal, VAR.texCoord -2.0*dx     -dy).xyz;
	float3  D0 = tex2D(decal, VAR.texCoord -2.0*dx        ).xyz;
	float3  G0 = tex2D(decal, VAR.texCoord -2.0*dx     +dy).xyz;
	float3  C4 = tex2D(decal, VAR.texCoord +2.0*dx     -dy).xyz;
	float3  F4 = tex2D(decal, VAR.texCoord +2.0*dx        ).xyz;
	float3  I4 = tex2D(decal, VAR.texCoord +2.0*dx     +dy).xyz;

	float3 F6 = tex2D(decal, tex +dx+0.25*dx+0.25*dy).xyz;
	float3 F7 = tex2D(decal, tex +dx+0.25*dx-0.25*dy).xyz;
	float3 F8 = tex2D(decal, tex +dx-0.25*dx-0.25*dy).xyz;
	float3 F9 = tex2D(decal, tex +dx-0.25*dx+0.25*dy).xyz;

	float3 B6 = tex2D(decal, tex +0.25*dx+0.25*dy-dy).xyz;
	float3 B7 = tex2D(decal, tex +0.25*dx-0.25*dy-dy).xyz;
	float3 B8 = tex2D(decal, tex -0.25*dx-0.25*dy-dy).xyz;
	float3 B9 = tex2D(decal, tex -0.25*dx+0.25*dy-dy).xyz;

	float3 D6 = tex2D(decal, tex -dx+0.25*dx+0.25*dy).xyz;
	float3 D7 = tex2D(decal, tex -dx+0.25*dx-0.25*dy).xyz;
	float3 D8 = tex2D(decal, tex -dx-0.25*dx-0.25*dy).xyz;
	float3 D9 = tex2D(decal, tex -dx-0.25*dx+0.25*dy).xyz;

	float3 H6 = tex2D(decal, tex +0.25*dx+0.25*dy+dy).xyz;
	float3 H7 = tex2D(decal, tex +0.25*dx-0.25*dy+dy).xyz;
	float3 H8 = tex2D(decal, tex -0.25*dx-0.25*dy+dy).xyz;
	float3 H9 = tex2D(decal, tex -0.25*dx+0.25*dy+dy).xyz;

	float4 b = mul( float4x3(B, D, H, F), XBR_Y_WEIGHT*Y );
	float4 c = mul( float4x3(C, A, G, I), XBR_Y_WEIGHT*Y );
	float4 e = mul( float4x3(E, E, E, E), XBR_Y_WEIGHT*Y );
	float4 d = b.yzwx;
	float4 f = b.wxyz;
	float4 g = c.zwxy;
	float4 h = b.zwxy;
	float4 i = c.wxyz;

	float4 i4 = mul( float4x3(I4, C1, A0, G5), XBR_Y_WEIGHT*Y );
	float4 i5 = mul( float4x3(I5, C4, A1, G0), XBR_Y_WEIGHT*Y );
	float4 h5 = mul( float4x3(H5, F4, B1, D0), XBR_Y_WEIGHT*Y );
	float4 f4 = h5.yzwx;

	float4 f0 = mul( float4x3(F6, B6, D6, H6), XBR_Y_WEIGHT*Y );
	float4 f1 = mul( float4x3(F7, B7, D7, H7), XBR_Y_WEIGHT*Y );
	float4 f2 = mul( float4x3(F8, B8, D8, H8), XBR_Y_WEIGHT*Y );
	float4 f3 = mul( float4x3(F9, B9, D9, H9), XBR_Y_WEIGHT*Y );

	float4 h0 = f0.wxyz;
	float4 h1 = f1.wxyz;
	float4 h2 = f2.wxyz;
	float4 h3 = f3.wxyz;

	// These inequations define the line below which interpolation occurs.
	fx      = (Ao*fp.y+Bo*fp.x); 
	fx_left = (Ax*fp.y+Bx*fp.x);
	fx_up   = (Ay*fp.y+By*fp.x);

	block_3d      =  ((f0==f1 && f1==f2 && f2==f3) && (h0==h1 && h1==h2 && h2==h3));
        interp_restriction_lv1 = interp_restriction_lv0 = ((e!=f) && (e!=h) && block_3d);

#ifdef CORNER_B
	interp_restriction_lv1      = (interp_restriction_lv0  &&  ( !eq(f,b) && !eq(h,d) || eq(e,i) && !eq(f,i4) && !eq(h,i5) || eq(e,g) || eq(e,c) ) );
#endif
#ifdef CORNER_D
	float4 c1 = i4.yzwx;
	float4 g0 = i5.wxyz;
	interp_restriction_lv1      = (interp_restriction_lv0  &&  ( !eq(f,b) && !eq(h,d) || eq(e,i) && !eq(f,i4) && !eq(h,i5) || eq(e,g) || eq(e,c) ) && (f!=f4 && f!=i || h!=h5 && h!=i || h!=g || f!=c || eq(b,c1) && eq(d,g0)));
#endif
#ifdef CORNER_C
	interp_restriction_lv1      = (interp_restriction_lv0  && ( !eq(f,b) && !eq(f,c) || !eq(h,d) && !eq(h,g) || eq(e,i) && (!eq(f,f4) && !eq(f,i4) || !eq(h,h5) && !eq(h,i5)) || eq(e,g) || eq(e,c)) );
#endif

	interp_restriction_lv2_left = ((e!=g) && (d!=g));
	interp_restriction_lv2_up   = ((e!=c) && (b!=c));

	float4 fx45i = saturate((fx      + delta  -Co - Ci)/(2*delta ));
	float4 fx45  = saturate((fx      + delta  -Co     )/(2*delta ));
	float4 fx30  = saturate((fx_left + deltaL -Cx     )/(2*deltaL));
	float4 fx60  = saturate((fx_up   + deltaU -Cy     )/(2*deltaU));

	float4 wd1 = weighted_distance( e, c, g, i, h5, f4, h, f);
	float4 wd2 = weighted_distance( h, d, i5, f, i4, b, e, i);

        edri     = (wd1 <= wd2) && interp_restriction_lv0;
	edr      = (wd1 <  wd2) && interp_restriction_lv1;
	edr_left = ((XBR_LV2_COEFFICIENT*df(f,g)) <= df(h,c)) && interp_restriction_lv2_left && edr;
	edr_up   = (df(f,g) >= (XBR_LV2_COEFFICIENT*df(h,c))) && interp_restriction_lv2_up && edr;

	fx45  = edr*fx45;
	fx30  = edr_left*fx30;
	fx60  = edr_up*fx60;
	fx45i = edri*fx45i;

	px = (df(e,f3) <= df(e,h1));

#ifdef SMOOTH_TIPS
	float4 maximos = max(max(fx30, fx60), max(fx45, fx45i));
#else
	float4 maximos = max(max(fx30, fx60), fx45);
#endif

	float3 res1 = E;
	res1 = lerp(res1, lerp(H, F, px.x), maximos.x);
	res1 = lerp(res1, lerp(B, D, px.z), maximos.z);
	
	float3 res2 = E;
	res2 = lerp(res2, lerp(F, B, px.y), maximos.y);
	res2 = lerp(res2, lerp(D, H, px.w), maximos.w);
	
	float3 res = lerp(res1, res2, step(c_df(E, res1), c_df(E, res2)));

	return float4(res, 1.0);
}


